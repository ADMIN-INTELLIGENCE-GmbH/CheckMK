#!/bin/bash
############################################################
#    _   ___  __  __ ___ _  _                              #
#   /_\ |   \|  \/  |_ _| \| |                             #
#  / _ \| |) | |\/| || || .` |                             #
# /_/ \_\___/|_|  |_|___|_|\_|                             #
#  ___ _  _ _____ ___ _    _    ___ ___ ___ _  _  ___ ___  #
# |_ _| \| |_   _| __| |  | |  |_ _/ __| __| \| |/ __| __| #
#  | || .` | | | | _|| |__| |__ | | (_ | _|| .` | (__| _|  #
# |___|_|\_| |_| |___|____|____|___\___|___|_|\_|\___|___| #
#   ___       _    _  _                                    #
#  / __|_ __ | |__| || |                                   #
# | (_ | '  \| '_ \ __ |                                   #
#  \___|_|_|_|_.__/_||_|                                   #
#                                                          #
############################################################
############################################################
# Helper script for automatic updates of local checks within Checkmk RAW
############################################################
# Author: Sascha Jelinek
# Company: ADMIN INTELLIGENCE GmbH
# Date: 2025-08-06
# Version: 1.0.2
# Web: www.admin-intelligence.de
############################################################

CSV_URL="https://raw.githubusercontent.com/ADMIN-INTELLIGENCE-GmbH/CheckMK/refs/heads/main/local_checks/local_checks_bakery/local_checks_bakery.csv"
AGENT_LOCAL="/usr/lib/check_mk_agent/local"

TMP_CSV="/tmp/local_checks_bakery.csv.$$"
curl -sfL "$CSV_URL" -o "$TMP_CSV" || { echo "2 \"Check_MK local check bakery\" - Error while reading CSV file"; exit 2; }

# Arrays zum Sammeln der Ausgabe
declare -a DETAILS_LINES

# Zähler
total_checks=0
updates=0
errors=0
up_to_date=0

# Funktion zum Versionsvergleich
compare_versions() {
    # Rückgabe: 0 = gleich, 1 = remote größer, 2 = lokal größer
    if dpkg --compare-versions "$1" gt "$2"; then
      return 1
    elif dpkg --compare-versions "$1" lt "$2"; then
      return 2
    elif dpkg --compare-versions "$1" eq "$2"; then
      return 0
    else
      return 3
    fi
}

while IFS="," read -r name url || [ -n "$name" ];
do
    # Header überspringen
    if [[ "$name" == "name" ]]; then continue; fi

    SCRIPT_LOCAL="$AGENT_LOCAL/$(basename "$url")"

    # Prüfen, ob lokal vorhanden
    if [[ ! -f "$SCRIPT_LOCAL" ]]; then
      # Nicht installieren, nur prüfen
      continue
    fi

    ((total_checks++))

    REMOTE_RAW=$(curl -sfL "$url")
    if [[ $? -ne 0 || -z "$REMOTE_RAW" ]]; then
        DETAILS_LINES+=("$name: Error while loading remote scripts")
        ((errors++))
        continue
    fi

    # Versionsnummer sauber extrahieren (entfernt unerwünschte Zeichen)
    REMOTE_VER=$(echo "$REMOTE_RAW" | grep -E '^# Version:' | head -n1 | sed -e 's/^# Version: *//' -e 's/[^0-9a-zA-Z.\-]//g')
    LOCAL_VER=$(grep -E '^# Version:' "$SCRIPT_LOCAL" | head -n1 | sed -e 's/^# Version: *//' -e 's/[^0-9a-zA-Z.\-]//g')

    if [[ -z "$REMOTE_VER" ]]; then
        DETAILS_LINES+=("$name: Remote version not found")
        ((errors++))
        continue
    fi

    if [[ -z "$LOCAL_VER" ]]; then
        # Lokale Version nicht gefunden, lokal vorhandenes Skript - Update durchführen
        echo "$REMOTE_RAW" > "$SCRIPT_LOCAL"
        chmod 755 "$SCRIPT_LOCAL"
        DETAILS_LINES+=("$name: Local version not found, update to $REMOTE_VER done")
        ((updates++))
        continue
    fi

    # Versionsvergleich
    compare_versions "$REMOTE_VER" "$LOCAL_VER"
    res=$?

    if [[ $res -eq 1 ]]; then
        # Remote Version ist größer: Update durchführen
        echo "$REMOTE_RAW" > "$SCRIPT_LOCAL"
        chmod 755 "$SCRIPT_LOCAL"
        DETAILS_LINES+=("$name: updated from $LOCAL_VER to $REMOTE_VER")
        ((updates++))
        if [[ "$name" == "pve_backup_config_check" ]]; then
            CRON_SCRIPT_URL="https://raw.githubusercontent.com/ADMIN-INTELLIGENCE-GmbH/CheckMK/refs/heads/main/local_checks/pve_backup_config/check_pve_backup_config_cron.sh"
            CRON_SCRIPT_LOCAL="/usr/lib/check_mk_agent/check_pve_backup_config_cron.sh"

            if curl -sfL "$CRON_SCRIPT_URL" -o "$CRON_SCRIPT_LOCAL"; then
                chmod 755 "$CRON_SCRIPT_LOCAL"
                DETAILS_LINES+=("check_pve_backup_config_cron.sh: updated successfully")
            else
                DETAILS_LINES+=("check_pve_backup_config_cron.sh: failed to update")
                ((errors++))
            fi
        fi
    elif [[ $res -eq 0 ]]; then
        DETAILS_LINES+=("$name: up to date ($LOCAL_VER)")
        ((up_to_date++))
    elif [[ $res -eq 2 ]]; then
        DETAILS_LINES+=("$name: local version is newer ($LOCAL_VER > $REMOTE_VER)")
        ((up_to_date++))
    else
        DETAILS_LINES+=("$name: invalid version (remote='$REMOTE_VER', local='$LOCAL_VER')")
        ((errors++))
    fi

done < "$TMP_CSV"

rm -f "$TMP_CSV"

# Statusermittlung für Checkmk:
# 0 = OK, 1 = WARN (z.B. Updates), 2 oder höher = CRIT (z.B. Fehler beim Abrufen)
if (( errors > 0 )); then
    STATUS=2
    STATUS_TEXT="CRIT"
elif (( updates > 0 )); then
    STATUS=1
    STATUS_TEXT="WARN"
else
    STATUS=0
    STATUS_TEXT="OK"
fi

DETAILLINES=""
# Dann Details mit TAB als Einrückung (Checkmk interpretiert das als "Details")
for line in "${DETAILS_LINES[@]}"; do
    DETAILLINES+="\n - $line"
done

# Ausgabe Format für einen einzelnen Check mit Details als untergeordnete Zeilen:
# Erst die Summenübersicht
echo "$STATUS \"Check_MK local check bakery\" - $total_checks scripts checked, $updates updates, $errors errors\nList of plugins: $DETAILLINES"

exit $STATUS
