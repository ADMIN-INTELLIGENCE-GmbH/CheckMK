#!/bin/bash
############################################################
#    _   ___  __  __ ___ _  _                              #
#   /_\ |   \|  \/  |_ _| \| |                             #
#  / _ \| |) | |\/| || || .` |                             #
# /_/ \_\___/|_|  |_|___|_|\_|                             #
#   ___ _  _ _____ ___ _    _    ___ ___ ___ _  _  ___ ___ #
#  |_ _| \| |_   _| __| |  | |  |_ _/ __| __| \| |/ __| __|#
#   | || .` | | | | _|| |__| |__ | | (_ | _|| .` | (__| _| #
#  |___|_|\_| |_| |___|____|____|___\___|___|_|\_|\___|___|#
#   ___       _    _  _                                      #
#  / __|_ __ | |__| || |                                    #
# | (_ | '  \| '_ \ __ |                                    #
#  \___|_|_|_|_.__/_||_|                                    #
#                                                          #
############################################################
############################################################
# Script to check which VM or LXC is not monitored
############################################################
# Author: Sascha Jelinek
# Company: ADMIN INTELLIGENCE GmbH
# Date: 2025-08-21
# Version: 1.0.5
# Web: www.admin-intelligence.de
############################################################
# Changelog
# v1.0.1
# - removed low case translation of alias
# v1.0.2
# - added VM-ID to the output
# v1.0.3
# - added grouping by PVE host IP with IP output
# v1.0.4
# - use IP directly from server file without resolution
# v1.0.5
# - single summarized output for all hosts
############################################################
ok=0
warn=1
crit=2

log() {
    local msg="$1"
    local timestamp
    timestamp="$(date '+%Y-%m-%d %H:%M:%S')"
    echo "[$timestamp] $msg" >> /tmp/checkmk_pve_discovery.log
}

site=$(omd sites | awk '{print $1}')
if [[ -z "$site" ]]; then
    echo "$warn \"PVE monitored guests\" - No Checkmk site found"
    exit 1
fi

livestatus_socket="/opt/omd/sites/$site/tmp/run/live"

cmk_prefix="su - $site -c"

server_file="/etc/check_mk/pve_discovery_server.txt"
blacklist_file="/etc/check_mk/pve_discovery_blacklist.txt"

declare -A blacklist_map=()
if [[ -f "$blacklist_file" ]]; then
    while IFS=: read -r host vmid; do
        [[ -z "$host" || -z "$vmid" ]] && continue
        blacklist_map["$host:$vmid"]=1
    done < "$blacklist_file"
fi

declare -A alias_map=()
while IFS= read -r line; do
    name=${line%%;*}
    alias=${line#*;}
    [[ -z "$alias" ]] && alias="$name"
    alias_map["$name"]="${alias}"
done < <($cmk_prefix "echo -e 'GET hosts\nColumns: name alias\nOutputFormat: plain\n' | unixcat $livestatus_socket")

mapfile -t hosts < "$server_file"

declare -A not_monitored_vms_by_ip=()
declare -A total_vm_count_by_ip=()

for pve_host in "${hosts[@]}"; do
    pve_host="$(echo -e "${pve_host}" | tr -d '[:space:]')"
    [[ -z "$pve_host" ]] && continue

    qm_output=$(timeout 10s ssh -o BatchMode=yes -o ConnectTimeout=5 "$pve_host" qm list 2>/dev/null)
    rc=$?
    if [[ $rc -ne 0 || -z "$qm_output" ]]; then
        echo "$warn \"PVE monitored guests\" - SSH to $pve_host failed or no qm list output"
        continue
    fi

    mapfile -t vm_lines < <(echo "$qm_output" | tail -n +2)

    for line in "${vm_lines[@]}"; do
        [[ -z "$line" ]] && continue

        vmid=$(awk '{print $1}' <<< "$line")
        vmname=$(awk '{print $2}' <<< "$line")

        if [[ ${blacklist_map["$pve_host:$vmid"]+_} ]]; then
            continue
        fi

        ((total_vm_count_by_ip["$pve_host"]++))

        found=0
        for mon_name in "${!alias_map[@]}"; do
            if [[ "${alias_map[$mon_name]}" == "$vmname" ]]; then
                found=1
                break
            fi
        done

        if (( found == 0 )); then
            # Escape Klammern in VM-Namen-Ausgabe fÃ¼r Bash String-Konkatenation
            not_monitored_vms_by_ip["$pve_host"]+="${vmname} (${vmid}), "
        fi
    done
done

if (( ${#not_monitored_vms_by_ip[@]} == 0 )); then
    total=0
    for count in "${total_vm_count_by_ip[@]}"; do
        ((total+=count))
    done
    echo "$ok \"PVE monitored guests\" - All $total VMs are monitored"
else
    total_unmonitored=0
    total_vms=0
    unmonitored_list=""

    for ip in "${!not_monitored_vms_by_ip[@]}"; do
        count=$(echo -n "${not_monitored_vms_by_ip[$ip]}" | awk -F',' '{print NF-1}')
        total=${total_vm_count_by_ip[$ip]:-0}
        ((total_unmonitored+=count))
        ((total_vms+=total))
        unmonitored_list+="$ip: ${not_monitored_vms_by_ip[$ip]} "
    done

    echo "$crit \"PVE monitored guests\" - $total_unmonitored of $total_vms VMs not monitored --- Unmonitored VMs by host IPs: $unmonitored_list"
fi

echo "<<<<>>>>"
