#!/bin/bash
############################################################
#    _   ___  __  __ ___ _  _                              #
#   /_\ |   \|  \/  |_ _| \| |                             #
#  / _ \| |) | |\/| || || .` |                             #
# /_/ \_\___/|_|  |_|___|_|\_|                             #
#  ___ _  _ _____ ___ _    _    ___ ___ ___ _  _  ___ ___  #
# |_ _| \| |_   _| __| |  | |  |_ _/ __| __| \| |/ __| __| #
#  | || .` | | | | _|| |__| |__ | | (_ | _|| .` | (__| _|  #
# |___|_|\_| |_| |___|____|____|___\___|___|_|\_|\___|___| #
#   ___       _    _  _                                    #
#  / __|_ __ | |__| || |                                   #
# | (_ | '  \| '_ \ __ |                                   #
#  \___|_|_|_|_.__/_||_|                                   #
#                                                          #
############################################################
############################################################
# SQL-Dump Check für Checkmk (Local Check)
# Prüft die letzten Zeilen von *.sql-Dateien unter /sicherung
############################################################
# Author: Sascha Jelinek
# Company: ADMIN INTELLIGENCE GmbH
# Date: 2025-07-24
# Version: 1.4.4
# Web: www.admin-intelligence.de
############################################################

# Maximale erlaubte Differenz (1 Tag und 6 Stunden in Sekunden)
MAX_DIFF_SECONDS=$((30 * 3600))  # 30 Stunden

# Aktueller Timestamp
CURRENT_TIMESTAMP=$(date +%s)

# Minimale Zeit seit letzter Änderung (2 Minuten in Sekunden)
MIN_MTIME=$((2 * 60))

# Funktion zum Überprüfen der Dump-Datei
check_dump_file() {
    local file="$1"
    local base_name=$(basename "$file")
    # Extrahiere Datumsteil im Format YYYYMMDD-HHmm
    local dump_date=$(echo "$base_name" | grep -oP '\d{8}-\d{4}' | sed 's/\(.\{4\}\)\(.\{2\}\)\(.\{2\}\)-\(.\{2\}\)\(.\{2\}\)/\1-\2-\3 \4:\5:00/')
    local dump_timestamp=$(date -d "$dump_date" +%s)
    # Basisname ohne Datumsteil und Suffix ".sql"
    local check_name=$(echo "$base_name" | sed 's/-[0-9]\{8\}-[0-9]\{4\}\.sql$//')

    # Berechne die Differenz in Sekunden
    local diff_seconds=$((CURRENT_TIMESTAMP - dump_timestamp))

    # Dateigröße in human-readable Format ermitteln
    local file_size=$(du -h "$file" | cut -f1)

    if [ $diff_seconds -le $MAX_DIFF_SECONDS ]; then
        if tail -n 5 "$file" | grep -qE "Dump completed on|database dump complete|database cluster dump complete"; then
            echo "0 \"SQL Dump ${check_name}\" - Dump $base_name is up-to-date and completed properly. Size: $file_size."
        else
            echo "2 \"SQL Dump ${check_name}\" - Dump $base_name is recent but not completed properly. Size: $file_size."
        fi
    else
        echo "2 \"SQL Dump ${check_name}\" - Warning: Dump $base_name is older than 1 day and 6 hours! Size: $file_size."
    fi
}

# Finde die aktuellsten Dumps für jeden Typ, nur Dateien mit Namensschema [name]-YYYYMMDD-HHmm.sql
declare -A latest_dumps
while IFS= read -r -d '' file; do
    # Prüfe, ob die Datei seit mindestens 2 Minuten nicht mehr geändert wurde
    if [ $((CURRENT_TIMESTAMP - $(stat -c %Y "$file"))) -ge $MIN_MTIME ]; then
        base_name=$(basename "$file")
        # Prüfen, ob der Dateiname dem Muster entspricht
        if [[ "$base_name" =~ ^(.+)-[0-9]{8}-[0-9]{4}\.sql$ ]]; then
            # Extrahiere Basisname ohne Datum und .sql
            base_key="${BASH_REMATCH[1]}"
            if [[ ! ${latest_dumps[$base_key]} ]] || [[ "$file" -nt "${latest_dumps[$base_key]}" ]]; then
                latest_dumps[$base_key]="$file"
            fi
        fi
    fi
done < <(find -L /sicherung -type f -name '*.sql' -print0)

# Überprüfe die aktuellsten Dumps
for dump in "${latest_dumps[@]}"; do
    check_dump_file "$dump"
done

# Wenn keine Dumps gefunden wurden
if [ ${#latest_dumps[@]} -eq 0 ]; then
    echo "1 sql_dump - No SQL dumps with name pattern [name]-YYYYMMDD-HHmm.sql found."
fi
